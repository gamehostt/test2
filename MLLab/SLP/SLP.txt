import numpy as np
import pandas as pd

class Perceptron:
    def __init__(self, input_size, learning_rate=0.1, epochs=100):
        self.weights = np.zeros(input_size)
        self.bias = 0
        self.learning_rate = learning_rate
        self.epochs = epochs

    def activation(self, x):
        return 1 if x >= 0 else 0

    def predict(self, x):
        z = np.dot(self.weights, x) + self.bias
        return self.activation(z)

    def train(self, X, y):
        for _ in range(self.epochs):
            for i in range(y.shape[0]):
                prediction = self.predict(X[i])
                self.weights += self.learning_rate * (y[i] - prediction) * X[i]
                self.bias += self.learning_rate * (y[i] - prediction)





# AND Logic Function
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([0, 0, 0, 1])  # change value in y to match AND OR XOR

# Create and train the perceptron for AND
perceptron = Perceptron(input_size=2)
perceptron.train(X, y)

# Test the perceptron for AND
print("AND Logic Function:")
for i in range(len(X)):
    print(X[i], "-->", perceptron.predict(X[i]))

