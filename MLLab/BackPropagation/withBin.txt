import numpy as np

def step(x):
    return np.where(x >= 0, 1, 0)

def step_derivative(x):
    return np.zeros_like(x)

weights_input_hidden = np.array([[0.15, 0.25],[0.20, 0.30]])
weights_hidden_output = np.array([[0.40, 0.45],[0.50, 0.55]])

bias_hidden = np.array([0.35, 0.35])
bias_output = np.array([0.60, 0.60])

X = np.array([[0.05, 0.10]])

y = np.array([[0.01, 0.99]])

learning_rate = 0.5
epochs = 5000

for epoch in range(epochs):
    
    # Forward propagation
    hidden_layer_input = np.dot(X, weights_input_hidden) + bias_hidden
    hidden_layer_output = step(hidden_layer_input)

    output_layer_input = np.dot(hidden_layer_output, weights_hidden_output) + bias_output
    output_layer_output = step(output_layer_input)
    
    print("First Pass Output: ", output_layer_output)
    
    # Backpropagation
    error = y - output_layer_output
    
    output_delta = error * step_derivative(output_layer_output)
    print("Error: ", output_delta)

    hidden_error = output_delta.dot(weights_hidden_output.T)
    hidden_delta = hidden_error * step_derivative(hidden_layer_output)

    weights_hidden_output += hidden_layer_output.T.dot(output_delta) * learning_rate
    weights_input_hidden += X.T.dot(hidden_delta) * learning_rate
    bias_output += np.sum(output_delta, axis=0) * learning_rate
    bias_hidden += np.sum(hidden_delta, axis=0) * learning_rate
    
    print("Updated weights")
    print(weights_hidden_output)
    print(weights_input_hidden)


# Test the trained network
hidden_layer_input = np.dot(X, weights_input_hidden) + bias_hidden
hidden_layer_output = step(hidden_layer_input)

output_layer_input = np.dot(hidden_layer_output, weights_hidden_output) + bias_output
output_layer_output = step(output_layer_input)

print("Output layer output after training:")
print(output_layer_output)